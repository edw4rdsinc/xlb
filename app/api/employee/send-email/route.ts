import { NextResponse } from 'next/server'
import { Resend } from 'resend'

const resend = new Resend(process.env.RESEND_API_KEY!)

interface Section {
  title: string
  content: string
}

export async function POST(request: Request) {
  try {
    const { emails, fileName, text, sections, fileUrl } = await request.json()

    if (!emails || !Array.isArray(emails) || emails.length === 0) {
      return NextResponse.json(
        { error: 'No email addresses provided' },
        { status: 400 }
      )
    }

    if (!fileName || !text) {
      return NextResponse.json(
        { error: 'Missing fileName or text' },
        { status: 400 }
      )
    }

    // Create email HTML content with sections
    const sectionsHTML = sections && sections.length > 0
      ? sections.map((section: Section) => `
          <div style="margin-bottom: 24px;">
            <div style="background: #0066cc; color: white; padding: 12px 20px; border-radius: 6px 6px 0 0; font-weight: bold; font-size: 14px;">
              ${section.title}
            </div>
            <div style="background: white; padding: 20px; border: 1px solid #ddd; border-top: none; border-radius: 0 0 6px 6px; font-family: monospace; white-space: pre-wrap; font-size: 12px; line-height: 1.8;">
${section.content}
            </div>
          </div>
        `).join('')
      : `
          <div class="text-box" style="background: white; padding: 20px; border-left: 4px solid #0066cc; margin: 20px 0; font-family: monospace; white-space: pre-wrap; max-height: 400px; overflow-y: auto;">
${text.length > 5000 ? text.substring(0, 5000) + '\n\n[Text truncated - full content available in Wasabi]' : text}
          </div>
        `

    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #0066cc 0%, #003d7a 100%); color: white; padding: 30px; border-radius: 8px 8px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border: 1px solid #ddd; }
            .footer { background: #f1f1f1; padding: 20px; text-align: center; font-size: 12px; color: #666; border-radius: 0 0 8px 8px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1 style="margin: 0;">PDF Text Extraction Complete</h1>
              <p style="margin: 10px 0 0 0; opacity: 0.9;">XL Benefits Employee Portal</p>
            </div>

            <div class="content">
              <h2 style="color: #0066cc; margin-top: 0;">Document Details</h2>
              <p><strong>File Name:</strong> ${fileName.split('/').pop()}</p>
              <p><strong>Processed:</strong> ${new Date().toLocaleString()}</p>

              <h3 style="color: #0066cc; margin-top: 30px;">Extracted Content</h3>
              ${sectionsHTML}

              <p style="margin-top: 30px;">
                <strong>Total Characters:</strong> ${text.length.toLocaleString()}<br>
                <strong>Estimated Pages:</strong> ${Math.ceil(text.length / 2000)}
              </p>

              <p style="margin-top: 10px; font-size: 12px; color: #666;">
                Original PDF stored securely in Wasabi cloud storage.
              </p>
            </div>

            <div class="footer">
              <p>This email was automatically generated by the XL Benefits Employee Portal.</p>
              <p>Â© ${new Date().getFullYear()} XL Benefits. All rights reserved.</p>
            </div>
          </div>
        </body>
      </html>
    `

    // Send email to all recipients with detailed error tracking
    const results = await Promise.allSettled(
      emails.map(async (email) => {
        try {
          const result = await resend.emails.send({
            from: 'XL Benefits Portal <sam@updates.edw4rds.com>',
            to: email,
            subject: `PDF Extracted: ${fileName.split('/').pop()}`,
            html: htmlContent,
          })
          return { email, status: 'success', result }
        } catch (error: any) {
          return { email, status: 'failed', error: error.message }
        }
      })
    )

    const successful = results.filter(r => r.status === 'fulfilled').length
    const failed = results.filter(r => r.status === 'rejected').length

    console.log('Email results:', JSON.stringify(results, null, 2))

    return NextResponse.json({
      success: true,
      emailsSent: successful,
      totalRecipients: emails.length,
      failed,
      results,
    })
  } catch (error: any) {
    console.error('Email error:', error)
    return NextResponse.json(
      { error: 'Failed to send emails', details: error.message },
      { status: 500 }
    )
  }
}
